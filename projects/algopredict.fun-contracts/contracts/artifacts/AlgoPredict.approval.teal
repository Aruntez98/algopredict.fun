#pragma version 10
intcblock 1 8 0 2
bytecblock 0x 0x70726564696374696f6e496e646578 0x0000000000000000 0x00

// This TEAL was generated by TEALScript v0.105.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts\AlgoPredict.algo.ts:36
	// this.predictionIndex.value = 0
	bytec 1 //  "predictionIndex"
	intc 2 // 0
	app_global_put
	retsub

// addPrediction(string,string,string,uint64,uint64,string,string)uint64
*abi_route_addPrediction:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// image: string
	txna ApplicationArgs 7
	extract 2 0

	// category: string
	txna ApplicationArgs 6
	extract 2 0

	// endsAt: uint64
	txna ApplicationArgs 5
	btoi

	// startsAt: uint64
	txna ApplicationArgs 4
	btoi

	// option2Name: string
	txna ApplicationArgs 3
	extract 2 0

	// option1Name: string
	txna ApplicationArgs 2
	extract 2 0

	// question: string
	txna ApplicationArgs 1
	extract 2 0

	// execute addPrediction(string,string,string,uint64,uint64,string,string)uint64
	callsub addPrediction
	itob
	concat
	log
	intc 0 // 1
	return

// addPrediction(question: string, option1Name: string, option2Name: string, startsAt: uint64, endsAt: uint64, category: string, image: string): uint64
addPrediction:
	proto 7 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts\AlgoPredict.algo.ts:48
	// assert(startsAt < endsAt, 'startsAt should be less than endsAt')
	frame_dig -4 // startsAt: uint64
	frame_dig -5 // endsAt: uint64
	<

	// startsAt should be less than endsAt
	assert

	// contracts\AlgoPredict.algo.ts:49
	// assert(this.txn.sender === this.app.creator, 'Only creator can add prediction')
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// Only creator can add prediction
	assert

	// contracts\AlgoPredict.algo.ts:50
	// newPrediction: Prediction = {
	//       question: question,
	//       option1SharesBhougth: 0,
	//       option2SharesBhougth: 0,
	//       option1: option1Name,
	//       option2: option2Name,
	//       startsAt: startsAt,
	//       endsAt: endsAt,
	//       result: 0,
	//       category: category,
	//       image: image,
	//       noOfUsers: 0,
	//     }
	bytec 0 //  initial head
	bytec 0 //  initial tail
	pushbytes 0x0033 // initial head offset
	bytec 2 // 0x0000000000000000
	callsub *process_static_tuple_element
	bytec 2 // 0x0000000000000000
	callsub *process_static_tuple_element
	frame_dig -4 // startsAt: uint64
	itob
	callsub *process_static_tuple_element
	frame_dig -5 // endsAt: uint64
	itob
	callsub *process_static_tuple_element
	bytec 3 // 0x00
	callsub *process_static_tuple_element
	bytec 2 // 0x0000000000000000
	callsub *process_static_tuple_element
	frame_dig -1 // question: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -2 // option1Name: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -3 // option2Name: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -6 // category: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -7 // image: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 0 // newPrediction: Prediction

	// contracts\AlgoPredict.algo.ts:63
	// this.predictions(this.predictionIndex.value).value = newPrediction
	bytec 1 //  "predictionIndex"
	app_global_get
	itob
	dup
	box_del
	pop
	frame_dig 0 // newPrediction: Prediction
	box_put

	// contracts\AlgoPredict.algo.ts:64
	// this.predictionIndex.value = this.predictionIndex.value + 1
	bytec 1 //  "predictionIndex"
	dup
	app_global_get
	intc 0 // 1
	+
	app_global_put

	// contracts\AlgoPredict.algo.ts:65
	// return this.predictionIndex.value - 1;
	bytec 1 //  "predictionIndex"
	app_global_get
	intc 0 // 1
	-

	// set the subroutine return value
	frame_bury 0
	retsub

// buyShares(uint64,uint8,uint64,pay)void
*abi_route_buyShares:
	// payTxn: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (payTxn) for buyShares must be a pay transaction
	assert

	// amount: uint64
	txna ApplicationArgs 3
	btoi

	// option: uint8
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 2 (option) for buyShares must be a uint8
	assert
	btoi

	// predictionId: uint64
	txna ApplicationArgs 1
	btoi

	// execute buyShares(uint64,uint8,uint64,pay)void
	callsub buyShares
	intc 0 // 1
	return

// buyShares(predictionId: uint64, option: uint8, amount: uint64, payTxn: PayTxn): void
buyShares:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 7

	// contracts\AlgoPredict.algo.ts:69
	// assert(this.predictions(predictionId).exists, 'Prediction does not exist')
	frame_dig -1 // predictionId: uint64
	itob
	box_len
	swap
	pop

	// Prediction does not exist
	assert

	// contracts\AlgoPredict.algo.ts:70
	// prediction = this.predictions(predictionId).value
	frame_dig -1 // predictionId: uint64
	itob
	frame_bury 0 // storage key//prediction

	// contracts\AlgoPredict.algo.ts:71
	// assert(globals.latestTimestamp >= prediction.startsAt, 'Prediction has not started yet')
	global LatestTimestamp
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 16 8
	btoi
	>=

	// Prediction has not started yet
	assert

	// contracts\AlgoPredict.algo.ts:72
	// assert(globals.latestTimestamp < prediction.endsAt, 'Prediction has ended')
	global LatestTimestamp
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 24 8
	btoi
	<

	// Prediction has ended
	assert

	// contracts\AlgoPredict.algo.ts:73
	// assert(option === 1 || option === 2, 'Invalid option')
	frame_dig -2 // option: uint8
	intc 0 // 1
	==
	dup
	bnz *skip_or0
	frame_dig -2 // option: uint8
	intc 3 // 2
	==
	||

*skip_or0:
	// Invalid option
	assert

	// contracts\AlgoPredict.algo.ts:74
	// assert(prediction.result === 0, 'Prediction result is already set')
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 32 1
	btoi
	intc 2 // 0
	==

	// Prediction result is already set
	assert

	// contracts\AlgoPredict.algo.ts:75
	// predictionKey: UserPredictionKey = { user: this.txn.sender, predictionId: predictionId }
	txn Sender
	frame_dig -1 // predictionId: uint64
	itob
	concat
	frame_bury 1 // predictionKey: UserPredictionKey

	// contracts\AlgoPredict.algo.ts:76
	// hasUserBuyedPreviously = this.userPredictions(predictionKey).exists
	frame_dig 1 // predictionKey: UserPredictionKey
	box_len
	swap
	pop
	frame_bury 2 // hasUserBuyedPreviously: bool

	// *if0_condition
	// contracts\AlgoPredict.algo.ts:77
	// hasUserBuyedPreviously
	frame_dig 2 // hasUserBuyedPreviously: bool
	bz *if0_else

	// *if0_consequent
	// contracts\AlgoPredict.algo.ts:78
	// previousShares = this.userPredictions(predictionKey).value
	frame_dig 1 // predictionKey: UserPredictionKey
	frame_bury 3 // storage key//previousShares

	// *if1_condition
	// contracts\AlgoPredict.algo.ts:79
	// previousShares.option === option
	frame_dig 1 // predictionKey: UserPredictionKey
	intc 2 // 0
	intc 0 // 1
	box_extract
	btoi
	frame_dig -2 // option: uint8
	==
	bz *if1_elseif1_condition

	// *if1_consequent
	// *if2_condition
	// contracts\AlgoPredict.algo.ts:80
	// previousShares.amount > amount
	frame_dig 1 // predictionKey: UserPredictionKey
	intc 0 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	frame_dig -3 // amount: uint64
	>
	bz *if2_else

	// *if2_consequent
	// contracts\AlgoPredict.algo.ts:81
	// diff = previousShares.amount - amount
	frame_dig 1 // predictionKey: UserPredictionKey
	intc 0 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	frame_dig -3 // amount: uint64
	-
	frame_bury 4 // diff: uint64

	// *if3_condition
	// contracts\AlgoPredict.algo.ts:82
	// option === 1
	frame_dig -2 // option: uint8
	intc 0 // 1
	==
	bz *if3_else

	// *if3_consequent
	// contracts\AlgoPredict.algo.ts:83
	// prediction.option1SharesBhougth = prediction.option1SharesBhougth - diff
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	intc 2 // 0
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	frame_dig 4 // diff: uint64
	-
	itob
	replace3
	frame_dig 0 // storage key//prediction
	dup
	box_del
	pop
	swap
	box_put
	b *if3_end

*if3_else:
	// contracts\AlgoPredict.algo.ts:85
	// prediction.option2SharesBhougth = prediction.option2SharesBhougth - diff
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	intc 1 // 8
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	frame_dig 4 // diff: uint64
	-
	itob
	replace3
	frame_dig 0 // storage key//prediction
	dup
	box_del
	pop
	swap
	box_put

*if3_end:
	// contracts\AlgoPredict.algo.ts:87
	// sendPayment({ amount: diff, receiver: this.txn.sender })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts\AlgoPredict.algo.ts:87
	// amount: diff
	frame_dig 4 // diff: uint64
	itxn_field Amount

	// contracts\AlgoPredict.algo.ts:87
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	intc 2 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if2_end

*if2_else:
	// contracts\AlgoPredict.algo.ts:89
	// diff = amount - previousShares.amount
	frame_dig -3 // amount: uint64
	frame_dig 1 // predictionKey: UserPredictionKey
	intc 0 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	-
	frame_bury 5 // diff: uint64

	// *if4_condition
	// contracts\AlgoPredict.algo.ts:90
	// option === 1
	frame_dig -2 // option: uint8
	intc 0 // 1
	==
	bz *if4_else

	// *if4_consequent
	// contracts\AlgoPredict.algo.ts:91
	// prediction.option1SharesBhougth = prediction.option1SharesBhougth + diff
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	intc 2 // 0
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	frame_dig 5 // diff: uint64
	+
	itob
	replace3
	frame_dig 0 // storage key//prediction
	dup
	box_del
	pop
	swap
	box_put
	b *if4_end

*if4_else:
	// contracts\AlgoPredict.algo.ts:93
	// prediction.option2SharesBhougth = prediction.option2SharesBhougth + diff
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	intc 1 // 8
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	frame_dig 5 // diff: uint64
	+
	itob
	replace3
	frame_dig 0 // storage key//prediction
	dup
	box_del
	pop
	swap
	box_put

*if4_end:
	// contracts\AlgoPredict.algo.ts:95
	// verifyPayTxn(payTxn, { receiver: this.app.address, amount: { greaterThanEqualTo: diff } })
	// verify receiver
	frame_dig -4 // payTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"payTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -4 // payTxn: PayTxn
	gtxns Amount
	frame_dig 5 // diff: uint64
	>=

	// transaction verification failed: {"txn":"payTxn","field":"amount","condition":"greaterThanEqualTo","expected":">=diff"}
	assert

*if2_end:
	b *if1_end

*if1_elseif1_condition:
	// contracts\AlgoPredict.algo.ts:97
	// previousShares.amount > amount
	frame_dig 1 // predictionKey: UserPredictionKey
	intc 0 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	frame_dig -3 // amount: uint64
	>
	bz *if1_else

	// *if1_elseif1_consequent
	// contracts\AlgoPredict.algo.ts:98
	// diff = previousShares.amount - amount
	frame_dig 1 // predictionKey: UserPredictionKey
	intc 0 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	frame_dig -3 // amount: uint64
	-
	frame_bury 6 // diff: uint64

	// *if5_condition
	// contracts\AlgoPredict.algo.ts:99
	// option === 1
	frame_dig -2 // option: uint8
	intc 0 // 1
	==
	bz *if5_else

	// *if5_consequent
	// contracts\AlgoPredict.algo.ts:100
	// prediction.option1SharesBhougth = prediction.option1SharesBhougth + amount
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	intc 2 // 0
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	frame_dig -3 // amount: uint64
	+
	itob
	replace3
	frame_dig 0 // storage key//prediction
	dup
	box_del
	pop
	swap
	box_put

	// contracts\AlgoPredict.algo.ts:101
	// prediction.option2SharesBhougth = prediction.option2SharesBhougth - previousShares.amount
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	intc 1 // 8
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	frame_dig 1 // predictionKey: UserPredictionKey
	intc 0 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	-
	itob
	replace3
	frame_dig 0 // storage key//prediction
	dup
	box_del
	pop
	swap
	box_put
	b *if5_end

*if5_else:
	// contracts\AlgoPredict.algo.ts:103
	// prediction.option2SharesBhougth = prediction.option2SharesBhougth + amount
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	intc 1 // 8
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	frame_dig -3 // amount: uint64
	+
	itob
	replace3
	frame_dig 0 // storage key//prediction
	dup
	box_del
	pop
	swap
	box_put

	// contracts\AlgoPredict.algo.ts:104
	// prediction.option1SharesBhougth = prediction.option1SharesBhougth - previousShares.amount
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	intc 2 // 0
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	frame_dig 1 // predictionKey: UserPredictionKey
	intc 0 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	-
	itob
	replace3
	frame_dig 0 // storage key//prediction
	dup
	box_del
	pop
	swap
	box_put

*if5_end:
	// contracts\AlgoPredict.algo.ts:106
	// sendPayment({ amount: diff, receiver: this.txn.sender })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts\AlgoPredict.algo.ts:106
	// amount: diff
	frame_dig 6 // diff: uint64
	itxn_field Amount

	// contracts\AlgoPredict.algo.ts:106
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	intc 2 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if1_end

*if1_else:
	// contracts\AlgoPredict.algo.ts:108
	// diff = amount - previousShares.amount
	frame_dig -3 // amount: uint64
	frame_dig 1 // predictionKey: UserPredictionKey
	intc 0 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	-
	frame_bury 7 // diff: uint64

	// *if6_condition
	// contracts\AlgoPredict.algo.ts:109
	// option === 1
	frame_dig -2 // option: uint8
	intc 0 // 1
	==
	bz *if6_else

	// *if6_consequent
	// contracts\AlgoPredict.algo.ts:110
	// prediction.option1SharesBhougth = prediction.option1SharesBhougth + amount
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	intc 2 // 0
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	frame_dig -3 // amount: uint64
	+
	itob
	replace3
	frame_dig 0 // storage key//prediction
	dup
	box_del
	pop
	swap
	box_put

	// contracts\AlgoPredict.algo.ts:111
	// prediction.option2SharesBhougth = prediction.option2SharesBhougth - previousShares.amount
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	intc 1 // 8
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	frame_dig 1 // predictionKey: UserPredictionKey
	intc 0 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	-
	itob
	replace3
	frame_dig 0 // storage key//prediction
	dup
	box_del
	pop
	swap
	box_put
	b *if6_end

*if6_else:
	// contracts\AlgoPredict.algo.ts:113
	// prediction.option2SharesBhougth = prediction.option2SharesBhougth + amount
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	intc 1 // 8
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	frame_dig -3 // amount: uint64
	+
	itob
	replace3
	frame_dig 0 // storage key//prediction
	dup
	box_del
	pop
	swap
	box_put

	// contracts\AlgoPredict.algo.ts:114
	// prediction.option1SharesBhougth = prediction.option1SharesBhougth - previousShares.amount
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	intc 2 // 0
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	frame_dig 1 // predictionKey: UserPredictionKey
	intc 0 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	-
	itob
	replace3
	frame_dig 0 // storage key//prediction
	dup
	box_del
	pop
	swap
	box_put

*if6_end:
	// contracts\AlgoPredict.algo.ts:116
	// verifyPayTxn(payTxn, { receiver: this.app.address, amount: { greaterThanEqualTo: diff } })
	// verify receiver
	frame_dig -4 // payTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"payTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -4 // payTxn: PayTxn
	gtxns Amount
	frame_dig 7 // diff: uint64
	>=

	// transaction verification failed: {"txn":"payTxn","field":"amount","condition":"greaterThanEqualTo","expected":">=diff"}
	assert

*if1_end:
	// contracts\AlgoPredict.algo.ts:118
	// this.userPredictions(predictionKey).value = {
	//         option: option,
	//         amount: amount,
	//         claimed: 0,
	//       }
	frame_dig 1 // predictionKey: UserPredictionKey
	frame_dig -2 // option: uint8
	itob
	extract 7 1
	frame_dig -3 // amount: uint64
	itob
	concat
	bytec 3 // 0x00
	concat
	box_put
	b *if0_end

*if0_else:
	// *if7_condition
	// contracts\AlgoPredict.algo.ts:124
	// option === 1
	frame_dig -2 // option: uint8
	intc 0 // 1
	==
	bz *if7_else

	// *if7_consequent
	// contracts\AlgoPredict.algo.ts:125
	// prediction.option1SharesBhougth = prediction.option1SharesBhougth + amount
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	intc 2 // 0
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	frame_dig -3 // amount: uint64
	+
	itob
	replace3
	frame_dig 0 // storage key//prediction
	dup
	box_del
	pop
	swap
	box_put
	b *if7_end

*if7_else:
	// contracts\AlgoPredict.algo.ts:127
	// prediction.option2SharesBhougth = prediction.option2SharesBhougth + amount
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	intc 1 // 8
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	frame_dig -3 // amount: uint64
	+
	itob
	replace3
	frame_dig 0 // storage key//prediction
	dup
	box_del
	pop
	swap
	box_put

*if7_end:
	// contracts\AlgoPredict.algo.ts:129
	// prediction.noOfUsers = prediction.noOfUsers + 1
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	pushint 33
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 33 8
	btoi
	intc 0 // 1
	+
	itob
	replace3
	frame_dig 0 // storage key//prediction
	dup
	box_del
	pop
	swap
	box_put

	// contracts\AlgoPredict.algo.ts:130
	// verifyPayTxn(payTxn, { receiver: this.app.address, amount: { greaterThanEqualTo: amount } })
	// verify receiver
	frame_dig -4 // payTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"payTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -4 // payTxn: PayTxn
	gtxns Amount
	frame_dig -3 // amount: uint64
	>=

	// transaction verification failed: {"txn":"payTxn","field":"amount","condition":"greaterThanEqualTo","expected":">=amount"}
	assert

	// contracts\AlgoPredict.algo.ts:131
	// this.userPredictions(predictionKey).value = {
	//         option: option,
	//         amount: amount,
	//         claimed: 0,
	//       }
	frame_dig 1 // predictionKey: UserPredictionKey
	frame_dig -2 // option: uint8
	itob
	extract 7 1
	frame_dig -3 // amount: uint64
	itob
	concat
	bytec 3 // 0x00
	concat
	box_put

*if0_end:
	retsub

// endPrediction(uint64,uint8)void
*abi_route_endPrediction:
	// result: uint8
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 0 (result) for endPrediction must be a uint8
	assert
	btoi

	// predictionId: uint64
	txna ApplicationArgs 1
	btoi

	// execute endPrediction(uint64,uint8)void
	callsub endPrediction
	intc 0 // 1
	return

// endPrediction(predictionId: uint64, result: uint8): void
endPrediction:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts\AlgoPredict.algo.ts:140
	// assert(this.txn.sender === this.app.creator, 'Only creator can end prediction')
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// Only creator can end prediction
	assert

	// contracts\AlgoPredict.algo.ts:141
	// assert(this.predictions(predictionId).exists, 'Prediction does not exist')
	frame_dig -1 // predictionId: uint64
	itob
	box_len
	swap
	pop

	// Prediction does not exist
	assert

	// contracts\AlgoPredict.algo.ts:142
	// prediction = this.predictions(predictionId).value
	frame_dig -1 // predictionId: uint64
	itob
	frame_bury 0 // storage key//prediction

	// contracts\AlgoPredict.algo.ts:143
	// assert(globals.latestTimestamp >= prediction.endsAt, 'Prediction has not ended yet')
	global LatestTimestamp
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 24 8
	btoi
	>=

	// Prediction has not ended yet
	assert

	// contracts\AlgoPredict.algo.ts:144
	// assert(prediction.result === 0, 'Prediction result is already set')
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 32 1
	btoi
	intc 2 // 0
	==

	// Prediction result is already set
	assert

	// contracts\AlgoPredict.algo.ts:145
	// prediction.result = result
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	pushint 32
	frame_dig -2 // result: uint8
	itob
	extract 7 1
	replace3
	frame_dig 0 // storage key//prediction
	dup
	box_del
	pop
	swap
	box_put
	retsub

// claimReward(uint64)void
*abi_route_claimReward:
	// predictionId: uint64
	txna ApplicationArgs 1
	btoi

	// execute claimReward(uint64)void
	callsub claimReward
	intc 0 // 1
	return

// claimReward(predictionId: uint64): void
claimReward:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 4

	// contracts\AlgoPredict.algo.ts:149
	// assert(this.predictions(predictionId).exists, 'Prediction does not exist')
	frame_dig -1 // predictionId: uint64
	itob
	box_len
	swap
	pop

	// Prediction does not exist
	assert

	// contracts\AlgoPredict.algo.ts:150
	// prediction = this.predictions(predictionId).value
	frame_dig -1 // predictionId: uint64
	itob
	frame_bury 0 // storage key//prediction

	// contracts\AlgoPredict.algo.ts:151
	// assert(globals.latestTimestamp >= prediction.endsAt, 'Prediction has not ended yet')
	global LatestTimestamp
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 24 8
	btoi
	>=

	// Prediction has not ended yet
	assert

	// contracts\AlgoPredict.algo.ts:152
	// assert(prediction.result !== 0, 'Prediction result is not set yet')
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 32 1
	btoi
	intc 2 // 0
	!=

	// Prediction result is not set yet
	assert

	// contracts\AlgoPredict.algo.ts:153
	// predictionKey: UserPredictionKey = { user: this.txn.sender, predictionId: predictionId }
	txn Sender
	frame_dig -1 // predictionId: uint64
	itob
	concat
	frame_bury 1 // predictionKey: UserPredictionKey

	// contracts\AlgoPredict.algo.ts:154
	// assert(this.userPredictions(predictionKey).exists, 'User has not bought shares')
	frame_dig 1 // predictionKey: UserPredictionKey
	box_len
	swap
	pop

	// User has not bought shares
	assert

	// contracts\AlgoPredict.algo.ts:155
	// userPrediction = this.userPredictions(predictionKey).value
	frame_dig 1 // predictionKey: UserPredictionKey
	frame_bury 2 // storage key//userPrediction

	// contracts\AlgoPredict.algo.ts:156
	// assert(userPrediction.claimed === 0, 'User has already claimed reward')
	frame_dig 1 // predictionKey: UserPredictionKey
	pushint 9 // headOffset
	intc 0 // 1
	box_extract
	btoi
	intc 2 // 0
	==

	// User has already claimed reward
	assert

	// contracts\AlgoPredict.algo.ts:157
	// totalShares = prediction.option1SharesBhougth + prediction.option2SharesBhougth
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	+
	frame_bury 3 // totalShares: uint64

	// contracts\AlgoPredict.algo.ts:158
	// reward = 1 * userPrediction.amount
	intc 0 // 1
	frame_dig 1 // predictionKey: UserPredictionKey
	intc 0 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	*
	frame_bury 4 // reward: uint64

	// *if8_condition
	// contracts\AlgoPredict.algo.ts:159
	// prediction.result === 1
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 32 1
	btoi
	intc 0 // 1
	==
	bz *if8_elseif1_condition

	// *if8_consequent
	// contracts\AlgoPredict.algo.ts:160
	// reward = (totalShares * userPrediction.amount) / prediction.option1SharesBhougth
	frame_dig 3 // totalShares: uint64
	frame_dig 1 // predictionKey: UserPredictionKey
	intc 0 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	*
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	/
	frame_bury 4 // reward: uint64
	b *if8_end

*if8_elseif1_condition:
	// contracts\AlgoPredict.algo.ts:161
	// prediction.result === 2
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 32 1
	btoi
	intc 3 // 2
	==
	bz *if8_end

	// *if8_elseif1_consequent
	// contracts\AlgoPredict.algo.ts:162
	// reward = (totalShares * userPrediction.amount) / prediction.option2SharesBhougth
	frame_dig 3 // totalShares: uint64
	frame_dig 1 // predictionKey: UserPredictionKey
	intc 0 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	*
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	/
	frame_bury 4 // reward: uint64

*if8_end:
	// *if9_condition
	// contracts\AlgoPredict.algo.ts:164
	// prediction.result !== 3 && prediction.result !== userPrediction.option
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 32 1
	btoi
	pushint 3
	!=
	dup
	bz *skip_and0
	frame_dig 0 // storage key//prediction
	box_get

	// box value does not exist: this.predictions(predictionId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 32 1
	btoi
	frame_dig 1 // predictionKey: UserPredictionKey
	intc 2 // 0
	intc 0 // 1
	box_extract
	btoi
	!=
	&&

*skip_and0:
	bz *if9_end

	// *if9_consequent
	// contracts\AlgoPredict.algo.ts:165
	// reward = 0
	intc 2 // 0
	frame_bury 4 // reward: uint64

*if9_end:
	// contracts\AlgoPredict.algo.ts:167
	// sendPayment({ amount: reward, receiver: this.txn.sender, note: 'reward-' + predictionId })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts\AlgoPredict.algo.ts:167
	// amount: reward
	frame_dig 4 // reward: uint64
	itxn_field Amount

	// contracts\AlgoPredict.algo.ts:167
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts\AlgoPredict.algo.ts:167
	// note: 'reward-' + predictionId
	pushbytes 0x7265776172642d // "reward-"
	frame_dig -1 // predictionId: uint64
	concat
	itxn_field Note

	// Fee field not set, defaulting to 0
	intc 2 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\AlgoPredict.algo.ts:168
	// this.userPredictions(predictionKey).value = {
	//       option: userPrediction.option,
	//       amount: userPrediction.amount,
	//       claimed: 1,
	//     }
	frame_dig 1 // predictionKey: UserPredictionKey
	frame_dig 1 // predictionKey: UserPredictionKey
	intc 2 // 0
	intc 0 // 1
	box_extract
	btoi
	itob
	extract 7 1
	frame_dig 1 // predictionKey: UserPredictionKey
	intc 0 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	itob
	concat
	pushbytes 0x01
	concat
	box_put
	retsub

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xb36681f5 // method "addPrediction(string,string,string,uint64,uint64,string,string)uint64"
	pushbytes 0xed7f9c2b // method "buyShares(uint64,uint8,uint64,pay)void"
	pushbytes 0xc42390b4 // method "endPrediction(uint64,uint8)void"
	pushbytes 0x514953f1 // method "claimReward(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_addPrediction *abi_route_buyShares *abi_route_endPrediction *abi_route_claimReward

	// this contract does not implement the given ABI method for call NoOp
	err

*process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub